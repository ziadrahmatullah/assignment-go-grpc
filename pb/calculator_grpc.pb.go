// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: calculator.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmergencyFundsServiceClient is the client API for EmergencyFundsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmergencyFundsServiceClient interface {
	CalculateEmergencyFunds(ctx context.Context, in *EmergencyFundsReq, opts ...grpc.CallOption) (*EmergencyFundsRes, error)
}

type emergencyFundsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmergencyFundsServiceClient(cc grpc.ClientConnInterface) EmergencyFundsServiceClient {
	return &emergencyFundsServiceClient{cc}
}

func (c *emergencyFundsServiceClient) CalculateEmergencyFunds(ctx context.Context, in *EmergencyFundsReq, opts ...grpc.CallOption) (*EmergencyFundsRes, error) {
	out := new(EmergencyFundsRes)
	err := c.cc.Invoke(ctx, "/calculator.EmergencyFundsService/CalculateEmergencyFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmergencyFundsServiceServer is the server API for EmergencyFundsService service.
// All implementations must embed UnimplementedEmergencyFundsServiceServer
// for forward compatibility
type EmergencyFundsServiceServer interface {
	CalculateEmergencyFunds(context.Context, *EmergencyFundsReq) (*EmergencyFundsRes, error)
	mustEmbedUnimplementedEmergencyFundsServiceServer()
}

// UnimplementedEmergencyFundsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmergencyFundsServiceServer struct {
}

func (UnimplementedEmergencyFundsServiceServer) CalculateEmergencyFunds(context.Context, *EmergencyFundsReq) (*EmergencyFundsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateEmergencyFunds not implemented")
}
func (UnimplementedEmergencyFundsServiceServer) mustEmbedUnimplementedEmergencyFundsServiceServer() {}

// UnsafeEmergencyFundsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmergencyFundsServiceServer will
// result in compilation errors.
type UnsafeEmergencyFundsServiceServer interface {
	mustEmbedUnimplementedEmergencyFundsServiceServer()
}

func RegisterEmergencyFundsServiceServer(s grpc.ServiceRegistrar, srv EmergencyFundsServiceServer) {
	s.RegisterService(&EmergencyFundsService_ServiceDesc, srv)
}

func _EmergencyFundsService_CalculateEmergencyFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmergencyFundsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyFundsServiceServer).CalculateEmergencyFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.EmergencyFundsService/CalculateEmergencyFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyFundsServiceServer).CalculateEmergencyFunds(ctx, req.(*EmergencyFundsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EmergencyFundsService_ServiceDesc is the grpc.ServiceDesc for EmergencyFundsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmergencyFundsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.EmergencyFundsService",
	HandlerType: (*EmergencyFundsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateEmergencyFunds",
			Handler:    _EmergencyFundsService_CalculateEmergencyFunds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator.proto",
}
