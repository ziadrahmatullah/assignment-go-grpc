// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/dto"
	emergency_funds "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/pb/emergency-funds"
	mock "github.com/stretchr/testify/mock"
)

// CalculatorRepository is an autogenerated mock type for the CalculatorRepository type
type CalculatorRepository struct {
	mock.Mock
}

// CalculateThirdService provides a mock function with given fields: _a0
func (_m *CalculatorRepository) CalculateThirdService(_a0 dto.EmergencyFundsReq) (*emergency_funds.CalculateEmergencyFundsResponse, error) {
	ret := _m.Called(_a0)

	var r0 *emergency_funds.CalculateEmergencyFundsResponse
	if rf, ok := ret.Get(0).(func(dto.EmergencyFundsReq) *emergency_funds.CalculateEmergencyFundsResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emergency_funds.CalculateEmergencyFundsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.EmergencyFundsReq) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCalculatorRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCalculatorRepository creates a new instance of CalculatorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCalculatorRepository(t mockConstructorTestingTNewCalculatorRepository) *CalculatorRepository {
	mock := &CalculatorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
