// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	emergency_funds "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/pb/emergency-funds"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// CalculatorServiceClient is an autogenerated mock type for the CalculatorServiceClient type
type CalculatorServiceClient struct {
	mock.Mock
}

// CalculateEmergencyFunds provides a mock function with given fields: ctx, in, opts
func (_m *CalculatorServiceClient) CalculateEmergencyFunds(ctx context.Context, in *emergency_funds.CalculateEmergencyFundsRequest, opts ...grpc.CallOption) (*emergency_funds.CalculateEmergencyFundsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emergency_funds.CalculateEmergencyFundsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *emergency_funds.CalculateEmergencyFundsRequest, ...grpc.CallOption) *emergency_funds.CalculateEmergencyFundsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emergency_funds.CalculateEmergencyFundsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emergency_funds.CalculateEmergencyFundsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCalculatorServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewCalculatorServiceClient creates a new instance of CalculatorServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCalculatorServiceClient(t mockConstructorTestingTNewCalculatorServiceClient) *CalculatorServiceClient {
	mock := &CalculatorServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
