// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/pb"
)

// GameServiceClient is an autogenerated mock type for the GameServiceClient type
type GameServiceClient struct {
	mock.Mock
}

// ChooseBox provides a mock function with given fields: ctx, in, opts
func (_m *GameServiceClient) ChooseBox(ctx context.Context, in *pb.ChooseBoxReq, opts ...grpc.CallOption) (*pb.ChooseBoxRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.ChooseBoxRes
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ChooseBoxReq, ...grpc.CallOption) *pb.ChooseBoxRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ChooseBoxRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ChooseBoxReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBoxes provides a mock function with given fields: ctx, in, opts
func (_m *GameServiceClient) GetAllBoxes(ctx context.Context, in *pb.GameBoxesReq, opts ...grpc.CallOption) (*pb.GameBoxesReq, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GameBoxesReq
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GameBoxesReq, ...grpc.CallOption) *pb.GameBoxesReq); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GameBoxesReq)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GameBoxesReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemainingAttempt provides a mock function with given fields: ctx, in, opts
func (_m *GameServiceClient) GetRemainingAttempt(ctx context.Context, in *pb.AttemptReq, opts ...grpc.CallOption) (*pb.AttemptReq, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.AttemptReq
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AttemptReq, ...grpc.CallOption) *pb.AttemptReq); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AttemptReq)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.AttemptReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGameServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameServiceClient creates a new instance of GameServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameServiceClient(t mockConstructorTestingTNewGameServiceClient) *GameServiceClient {
	mock := &GameServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
