// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	emergency_funds "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/pb/emergency-funds"
	mock "github.com/stretchr/testify/mock"
)

// CalculatorServiceServer is an autogenerated mock type for the CalculatorServiceServer type
type CalculatorServiceServer struct {
	mock.Mock
}

// CalculateEmergencyFunds provides a mock function with given fields: _a0, _a1
func (_m *CalculatorServiceServer) CalculateEmergencyFunds(_a0 context.Context, _a1 *emergency_funds.CalculateEmergencyFundsRequest) (*emergency_funds.CalculateEmergencyFundsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emergency_funds.CalculateEmergencyFundsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *emergency_funds.CalculateEmergencyFundsRequest) *emergency_funds.CalculateEmergencyFundsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emergency_funds.CalculateEmergencyFundsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emergency_funds.CalculateEmergencyFundsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedCalculatorServiceServer provides a mock function with given fields:
func (_m *CalculatorServiceServer) mustEmbedUnimplementedCalculatorServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewCalculatorServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewCalculatorServiceServer creates a new instance of CalculatorServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCalculatorServiceServer(t mockConstructorTestingTNewCalculatorServiceServer) *CalculatorServiceServer {
	mock := &CalculatorServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
