// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/pb"
	mock "github.com/stretchr/testify/mock"
)

// AuthServiceServer is an autogenerated mock type for the AuthServiceServer type
type AuthServiceServer struct {
	mock.Mock
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) Login(_a0 context.Context, _a1 *pb.LoginReq) (*pb.LoginRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.LoginRes
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LoginReq) *pb.LoginRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.LoginRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.LoginReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) Register(_a0 context.Context, _a1 *pb.RegisterReq) (*pb.RegisterRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.RegisterRes
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RegisterReq) *pb.RegisterRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.RegisterRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.RegisterReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserDetails provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) UserDetails(_a0 context.Context, _a1 *pb.UserDetailsReq) (*pb.UserDetailsRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.UserDetailsRes
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UserDetailsReq) *pb.UserDetailsRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UserDetailsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UserDetailsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedAuthServiceServer provides a mock function with given fields:
func (_m *AuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewAuthServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthServiceServer creates a new instance of AuthServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthServiceServer(t mockConstructorTestingTNewAuthServiceServer) *AuthServiceServer {
	mock := &AuthServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
