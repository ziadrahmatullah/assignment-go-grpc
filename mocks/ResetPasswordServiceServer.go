// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/pb"
	mock "github.com/stretchr/testify/mock"
)

// ResetPasswordServiceServer is an autogenerated mock type for the ResetPasswordServiceServer type
type ResetPasswordServiceServer struct {
	mock.Mock
}

// ApplyPassReset provides a mock function with given fields: _a0, _a1
func (_m *ResetPasswordServiceServer) ApplyPassReset(_a0 context.Context, _a1 *pb.ApplyResetPassReq) (*pb.ApplyResetPassRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.ApplyResetPassRes
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ApplyResetPassReq) *pb.ApplyResetPassRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ApplyResetPassRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ApplyResetPassReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestPassReset provides a mock function with given fields: _a0, _a1
func (_m *ResetPasswordServiceServer) RequestPassReset(_a0 context.Context, _a1 *pb.RequestResetPassReq) (*pb.RequestResetPassRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.RequestResetPassRes
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RequestResetPassReq) *pb.RequestResetPassRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.RequestResetPassRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.RequestResetPassReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedResetPasswordServiceServer provides a mock function with given fields:
func (_m *ResetPasswordServiceServer) mustEmbedUnimplementedResetPasswordServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewResetPasswordServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewResetPasswordServiceServer creates a new instance of ResetPasswordServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResetPasswordServiceServer(t mockConstructorTestingTNewResetPasswordServiceServer) *ResetPasswordServiceServer {
	mock := &ResetPasswordServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
