// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/pb"
	mock "github.com/stretchr/testify/mock"
)

// TransactionServiceServer is an autogenerated mock type for the TransactionServiceServer type
type TransactionServiceServer struct {
	mock.Mock
}

// GetAllTransactions provides a mock function with given fields: _a0, _a1
func (_m *TransactionServiceServer) GetAllTransactions(_a0 context.Context, _a1 *pb.TransactionsReq) (*pb.TransactionPaginationRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.TransactionPaginationRes
	if rf, ok := ret.Get(0).(func(context.Context, *pb.TransactionsReq) *pb.TransactionPaginationRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.TransactionPaginationRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.TransactionsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopUp provides a mock function with given fields: _a0, _a1
func (_m *TransactionServiceServer) TopUp(_a0 context.Context, _a1 *pb.TopUpReq) (*pb.TransactionRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.TransactionRes
	if rf, ok := ret.Get(0).(func(context.Context, *pb.TopUpReq) *pb.TransactionRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.TransactionRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.TopUpReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: _a0, _a1
func (_m *TransactionServiceServer) Transfer(_a0 context.Context, _a1 *pb.TransferReq) (*pb.TransactionRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.TransactionRes
	if rf, ok := ret.Get(0).(func(context.Context, *pb.TransferReq) *pb.TransactionRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.TransactionRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.TransferReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedTransactionServiceServer provides a mock function with given fields:
func (_m *TransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewTransactionServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionServiceServer creates a new instance of TransactionServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionServiceServer(t mockConstructorTestingTNewTransactionServiceServer) *TransactionServiceServer {
	mock := &TransactionServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
