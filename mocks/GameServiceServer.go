// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/pb"
	mock "github.com/stretchr/testify/mock"
)

// GameServiceServer is an autogenerated mock type for the GameServiceServer type
type GameServiceServer struct {
	mock.Mock
}

// ChooseBox provides a mock function with given fields: _a0, _a1
func (_m *GameServiceServer) ChooseBox(_a0 context.Context, _a1 *pb.ChooseBoxReq) (*pb.ChooseBoxRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.ChooseBoxRes
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ChooseBoxReq) *pb.ChooseBoxRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ChooseBoxRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ChooseBoxReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBoxes provides a mock function with given fields: _a0, _a1
func (_m *GameServiceServer) GetAllBoxes(_a0 context.Context, _a1 *pb.GameBoxesReq) (*pb.GameBoxesReq, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GameBoxesReq
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GameBoxesReq) *pb.GameBoxesReq); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GameBoxesReq)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GameBoxesReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemainingAttempt provides a mock function with given fields: _a0, _a1
func (_m *GameServiceServer) GetRemainingAttempt(_a0 context.Context, _a1 *pb.AttemptReq) (*pb.AttemptReq, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.AttemptReq
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AttemptReq) *pb.AttemptReq); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AttemptReq)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.AttemptReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedGameServiceServer provides a mock function with given fields:
func (_m *GameServiceServer) mustEmbedUnimplementedGameServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewGameServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameServiceServer creates a new instance of GameServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameServiceServer(t mockConstructorTestingTNewGameServiceServer) *GameServiceServer {
	mock := &GameServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
